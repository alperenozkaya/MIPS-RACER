####################################################################
#				                                        
#	PROJECT TITLE: MIPS RACER       
#        
#	GROUP MEMBERS: ALPEREN Ã–ZKAYA
#		        AYHAN AYSOY	                           
#	                RECEP BARKIN TOPCU    						
#										
#										
#
#
# Bitmap Display Configuration:
# - Unit width in pixels: 16
# - Unit height in pixels: 16
# - Display width in pixels: 512
# - Display height in pixels: 512
# - Base Address for Display: 0x10008000 ($gp)
#
#####################################################################

#####################################################################
#	
# Reference Project: 
# henryinqz, â€œTrafficRacer/TrafficRacer.asm at main Â· henryinqz/TrafficRacer,â€? GitHub, 2023. https://github.com/henryinqz/TrafficRacer/blob/main/TrafficRacer.asm			 
#
#####################################################################
# This project is an implementation of the Traffic Racer game using  MIPS assembly language. 
# The game is designed with an emphasis on player interaction, creating a challenging and exciting 
# environment for players to navigate through.
# The player is given six lives. The challenge comes from navigating through the oncoming traffic; any collision 
# with other vehicles will result in the loss of life. The gameplay continues until all lives are lost or the 
# player manages to reach the end of the game by surviving all traffic encounters.
# A scoreboard progresses over time, filling up with green pixels to represent score progress. Upon filling up,
# the scoreboard resets, and the score level, represented by blue pixels, increases. The game includes a total of 16 score levels.
# The players' lives are visually tracked on the canvas using red pixels. The player's car can be moved left and right using the 'A' and 'D' keys.
#####################################################################

# constant values
.eqv	max_score	32  # max pixels on scoreboard
.eqv    max_score_level 16  # max pixels on score level board
.eqv	user_width	5   # user car sprite width
.eqv	user_height	7   # user car sprite height
.eqv	user_y_pos	25  # user starting position (bottom of bitmap display)
.eqv	obstacle_car_width	3  # obstacle car sprite width
.eqv	obstacle_car_height	5  # obstacle car sprite height
.eqv 	obstacle_truck_width 	3  # obstacle truck sprite width
.eqv	obstacle_truck_height	11 # obstacle truck sprite height

.eqv	random_number 12
.eqv	random_obst   2  # randomizes the spawn of truck or car on the left side

.data
# HEX values of colors are stored in memory.
gray: .word 0xFF808080  # gray for initial scoreboard
green: .word 0x00FF00 # green for scoreboard progress
blue: .word 0xFF0000FF  # blue for score level counter
red:  .word 0xFFFF0000  # red for life counter
black: .word 0xFF000000  # black for empty space
white: .word 0xFFFFFFFF  # white for the road

time : .word 300    # time to wait
user_x_pos: .word 5	# player starting x position
score:  .word 0  # score initialized
score_level: .word 1 # score level indicated by blue initialized

# CAR1 obstacle is obst1
obst1_y_pos: .word 5
obst1_y_pos_fix: .word 5
obst1_x_pos: .word 4
obst1_x_pos_fix: .word 4

# TRUCK obstacle is obst2
obst2_y_pos: .word 5
obst2_y_pos_fix: .word 5
obst2_x_pos: .word 8
obst2_x_pos_fix: .word 8

# checker for obstacles to reach the end of the map
obst_long: .word 33
obst_long_checker: .word 0

# CAR2 onstacle is obst3
obst3_y_pos: .word 5
obst3_y_pos_fix: .word 5
obst3_x_pos: .word 18
obst3_x_pos_fix: .word 16

right_car_random: .word 33
right_car_random_checker: .word 33

player_lives: .word 6  # player lives at the start

check_left: .word 0
road: 	   	.word # 0xe0e0e0=light grey (lines), 0x000080=medium grey (road), 0x263238=dark grey (sides), 0x808080=yellow
		0x263238,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0xe0e0e0 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x808080,0x808080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0xe0e0e0 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x263238,
		0x263238,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0xe0e0e0 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x808080,0x808080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0xe0e0e0 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x263238,
		0x263238,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0xe0e0e0 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x808080,0x808080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0xe0e0e0 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x263238,
		0x263238,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x000080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x808080,0x808080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x000080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x263238,
		0x263238,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x000080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x808080,0x808080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x000080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x263238,
		0x263238,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x000080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x808080,0x808080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x000080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x263238,
		0x263238,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0xe0e0e0 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x808080,0x808080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0xe0e0e0 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x263238,
		0x263238,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0xe0e0e0 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x808080,0x808080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0xe0e0e0 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x263238,
		0x263238,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0xe0e0e0 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x808080,0x808080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0xe0e0e0 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x263238,
		0x263238,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x000080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x808080,0x808080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x000080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x263238,
		0x263238,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x000080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x808080,0x808080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x000080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x263238,
		0x263238,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x000080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x808080,0x808080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x000080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x263238,
		0x263238,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0xe0e0e0 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x808080,0x808080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0xe0e0e0 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x263238,
		0x263238,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0xe0e0e0 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x808080,0x808080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0xe0e0e0 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x263238,
		0x263238,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0xe0e0e0 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x808080,0x808080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0xe0e0e0 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x263238,
		0x263238,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x000080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x808080,0x808080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x000080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x263238,
		0x263238,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x000080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x808080,0x808080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x000080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x263238,
		0x263238,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x000080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x808080,0x808080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x000080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x263238,
		0x263238,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0xe0e0e0 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x808080,0x808080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0xe0e0e0 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x263238,
		0x263238,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0xe0e0e0 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x808080,0x808080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0xe0e0e0 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x263238,
		0x263238,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0xe0e0e0 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x808080,0x808080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0xe0e0e0 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x263238,
		0x263238,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x000080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x808080,0x808080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x000080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x263238,
		0x263238,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x000080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x808080,0x808080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x000080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x263238,
		0x263238,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x000080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x808080,0x808080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x000080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x263238,
		0x263238,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0xe0e0e0 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x808080,0x808080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0xe0e0e0 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x263238,
		0x263238,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0xe0e0e0 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x808080,0x808080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0xe0e0e0 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x263238,
		0x263238,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0xe0e0e0 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0x808080,0x808080 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080, 0xe0e0e0 ,0x000080,0x000080,0x000080,0x000080,0x000080,0x000080,0x263238,
game_over_screen: 	.word # 0x808080=grey, 0xffffff=white, 0xed1c23=red
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0xffffff,0xffffff,0x263238,0x263238,0x263238,0xffffff,0xffffff,0x263238,0x263238,0xffffff,0x263238,0x263238,0x263238,0xffffff,0x263238,0xffffff,0xffffff,0xffffff,0xffffff,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0xffffff,0xffffff,0x263238,0xffffff,0xffffff,0x263238,0xffffff,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0xffffff,0xffffff,0x263238,0xffffff,0xffffff,0x263238,0xffffff,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0xffffff,0xffffff,0x263238,0xffffff,0xffffff,0x263238,0xffffff,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0xffffff,0x263238,0xffffff,0xffffff,0x263238,0xffffff,0xffffff,0xffffff,0xffffff,0x263238,0xffffff,0x263238,0xffffff,0x263238,0xffffff,0x263238,0xffffff,0xffffff,0xffffff,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0xffffff,0x263238,0x263238,0x263238,0xffffff,0x263238,0xffffff,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0xffffff,0x263238,0x263238,0x263238,0xffffff,0x263238,0xffffff,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0xffffff,0xffffff,0x263238,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0xffffff,0x263238,0x263238,0x263238,0xffffff,0x263238,0xffffff,0xffffff,0xffffff,0xffffff,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0xffffff,0xffffff,0x263238,0x263238,0xffffff,0x263238,0x263238,0x263238,0xffffff,0x263238,0xffffff,0xffffff,0xffffff,0xffffff,0x263238,0xffffff,0xffffff,0xffffff,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0xffffff,0x263238,0x263238,0x263238,0xffffff,0x263238,0xffffff,0x263238,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0xffffff,0x263238,0x263238,0x263238,0xffffff,0x263238,0xffffff,0x263238,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0xffffff,0x263238,0x263238,0xffffff,0xffffff,0xffffff,0x263238,0x263238,0xffffff,0xffffff,0xffffff,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0x263238,0x263238,0x263238,0xffffff,0x263238,0xffffff,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0x263238,0x263238,0x263238,0xffffff,0x263238,0xffffff,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0xffffff,0xffffff,0x263238,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0x263238,0xffffff,0xffffff,0xffffff,0xffffff,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,

user_car_draw: .word # 0xff0000=red, 0x99d9ea=light blue, 0x000001=black
		0x0,       0xff0000,  0xff0000,  0xff0000,  0x0,
        	0x0,       0xff0000,  0xff0000,  0xff0000,  0x0,
       		0x000001,  0xff0000,  0x99d9ea,  0xff0000,  0x000001,
        	0x0,       0xff0000,  0x99d9ea,  0xff0000,  0x0,
        	0x000001,  0xff0000,  0xff0000,  0xff0000,  0x000001,
        	0xff0000,  0xff0000,  0xff0000,  0xff0000,  0xff0000,
       		0x0,       0x0,       0xff0000,  0x0,       0x0

# drawing of car1
car1_sprite: .word # 0xff00ff=magenta 0xffff00=green
		0xff00ff, 0xff00ff, 0xff00ff,    
        	0xff00ff, 0xff00ff, 0xff00ff,
        	0xff00ff, 0xff00ff, 0xff00ff,
        	0xff00ff, 0xff00ff, 0xff00ff,
       		0xffff00, 0xff00ff, 0xffff00
                	
# drawing of car2
car2_sprite:	.word # 0x0=none, 0x880014=maroon, 0xffcb0e=yellow
		0xffcb0e, 0x880014, 0xffcb0e,
		0x880014, 0x880014, 0x880014,
		0x880014, 0x880014, 0x880014,
		0x880014, 0x880014, 0x880014,
		0x880014, 0x880014, 0x880014

# drawing of truck1
truck1_sprite: .word # 0x8B4513 = kahvereng, 0x808080 = gri , 0xffcb0e=yellow , 0x0000ff = mavi
		0xffcb0e, 0x0000ff, 0xffcb0e
		0x0000ff, 0x0000ff, 0x0000ff
		0x0000ff, 0x0000ff, 0x0000ff
		0x000080, 0x8B4513, 0x000080	
		0x8B4513, 0x8B4513, 0x8B4513
		0x8B4513, 0x8B4513, 0x8B4513
		0x8B4513, 0x8B4513, 0x8B4513
		0x8B4513, 0x8B4513, 0x8B4513
		0x8B4513, 0x8B4513, 0x8B4513
		0x8B4513, 0x8B4513, 0x8B4513
		0x8B4513, 0x8B4513, 0x8B4513
		
# drawing of truck2
truck2_sprite: .word # 0x8B4513 = kahvereng, 0x808080 = gri , 0xffcb0e=yellow , 0x0000ff = mavi
		0x8B4513, 0x8B4513, 0x8B4513
		0x8B4513, 0x8B4513, 0x8B4513
		0x8B4513, 0x8B4513, 0x8B4513
		0x8B4513, 0x8B4513, 0x8B4513
		0x8B4513, 0x8B4513, 0x8B4513
		0x8B4513, 0x8B4513, 0x8B4513
		0x8B4513, 0x8B4513, 0x8B4513
		0x000080, 0x8B4513, 0x000080
		0x0000ff, 0x0000ff, 0x0000ff
		0x0000ff, 0x0000ff, 0x0000ff
		0xffcb0e, 0x0000ff, 0xffcb0e


.text
main:
    	la $s0, 0x10008000  # gp base address
    	# draw initial scoreboard
    	jal initial_scoreboard
    	j game_loop

game_loop:
	jal wait # delay
	jal draw  # jumps to draw subroutine

	back:
	jal increment_score # jumps to increment score subroutine
	back2:
	
	lw $t0, check_left 
	beqz $t0, obst_move1 # if check_left = 0 branch to obst_move1
	beq $t0, 1, obst_move2 # if check_left = 1 branch to obst_move1
	obst_move1:
	jal obst1_movement
	b obs_go_on
	obst_move2:
	jal obst2_movement
	
	obs_go_on:  
	jal obst3_movement
	# check if there is collision or not
	jal check_collision_cars
	jal check_collision_trucks
	jal check_collision_cars_2
	jal keyboard 
	j game_loop

wait: # wait for a while
	li $v0, 32
	lw $a0, time
	syscall
	jr $ra

increment_score: # maintains the progress of scoreboard
	lw $t0, score
	bge $t0, max_score, increment_score_level
	addi $t0, $t0, 1
	sw $t0, score
	jr $ra
increment_score_level: # maintains the progress of score level board
	# reset scoreboard
	li $t0, 0
	sw $t0, score
	
	# increment score level
	lw $t0, score_level
	bge $t0, max_score_level, Exit
	addi $t0, $t0, 1
	sw $t0, score_level
	
initial_scoreboard: 
	# Draw initial scoreboard
        li $t0, 1  # Scoreboard row
        li $t1, 0   # Starting from first column
        la $t2, gray
        li $t4, 32
        jal drawRow
        b back2
draw:
	# Draw scoreboard
    	li $t0, 1
    	li $t1, 0   # Starting from first column
   	la $t2, green
   	lw $t4, score
   	jal drawRow
	

    	# Draw score counter
    	li $t0, 2
    	li $t1, 0   # Starting from first column
   	la $t2, blue
   	lw $t4, score_level
   	sll $t4, $t4, 1  # multiply by 2 since it skips a column
   	jal drawRowWithSkip

    	# Draw life indicator
    	li $t0, 3
    	la $t2, black
   	lw $t4, player_lives
   	sll $t4, $t4, 1  # multiply by 2 since it skips a column
   	lw $t1, player_lives
   	sll $t1, $t1, 1
   	jal drawRowWithSkip
    	
    	li $t0, 3
    	li $t1, 0   # Starting from first column
    	la $t2, red
   	lw $t4, player_lives
   	sll $t4, $t4, 1  # multiply by 2 since it skips a column
   	jal drawRowWithSkip

    	# Draw the road
   	li $t0, 5  # Starting from row 6
   	li $t1, 0  # Starting from first column
   	la $t2, road
   	jal drawRoad
   	
   	 # Draw the car
   	li $t0, user_y_pos
   	lw $t1, user_x_pos
   	la $t2, user_car_draw
   	jal draw_user_car
   	
# check if the obstacle reached to the bottom
lw $t0, obst_long_checker
beqz $t0, random_number_creater_obst
   	
lw $t0, check_left
beq $t0, 1, left_truck

# draw left car	
left_car:
	sw $zero, check_left
	lw $t0, obst_long_checker
	lw $t1, obst_long
	beq $t0, $t1, obst_left_reset
	addi $t0, $t0, 1
	sw $t0, obst_long_checker
	lw $t0, obst1_y_pos
	lw $t1, obst1_x_pos
	la $t2, car1_sprite
	jal draw_user_obst_cars
	b right_car
   	
obst_left_reset:
	sw $zero, obst_long_checker
	b right_car

# draws left truck   	
left_truck:
	li $t6, 1
	sw $t6, check_left
	lw $t0, obst_long_checker
	lw $t1, obst_long
	beq $t0, $t1, obst_left_reset
	addi $t0, $t0, 1
	sw $t0, obst_long_checker
	
	
	lw $t0, obst2_y_pos
	lw $t1, obst2_x_pos
	la $t2, truck2_sprite
	jal draw_truck_loop


# draw right car	  	  	
right_car:
	lw $t0, right_car_random_checker
	lw $t1, right_car_random
	beq $t0, $t1, right_car_reset
	addi $t0, $t0, 1
	sw $t0, right_car_random_checker
	lw $t0, obst3_y_pos
	lw $t1, obst3_x_pos
	la $t2, car2_sprite
	jal draw_user_obst_cars
	b back
	
right_car_reset:
	sw $zero, right_car_random_checker
	b random_number_creator_position
random_right:
	addi $t0, $a0, 15
	sw $t0, obst3_x_pos
	b back
	
   	
# Draw a row with the given color
# Parameters: $t0 = row, $t1 = column, $t2 = color
drawRow:
    	lw $t3, 0($t2)  # load the color
    	drawRow_loop:
        	mul $a1, $t0, 32 # calculate the pixel position
        	add $a1, $a1, $t1
        	sll $a1, $a1, 2  # convert pixel position to byte offset
        	add $a1, $a1, $s0  # add base address to get the actual address
        	sw $t3, 0($a1)  # store the pixel color
        	addi $t1, $t1, 1  # move to next column
        	blt $t1, $t4, drawRow_loop
    	jr $ra

# Draw a row with given color skipping a pixel
# Paramaters: $t0 = row, $t1 = column, $t2 = color
drawRowWithSkip:
    	lw $t3, 0($t2)  # load the color
    	drawRowWithSkip_loop:
        	mul $a1, $t0, 32 # calculate the pixel position
        	add $a1, $a1, $t1
        	sll $a1, $a1, 2  # convert pixel position to byte offset
        	add $a1, $a1, $s0  # add base address to get the actual address
        	sw $t3, 0($a1)  # store the pixel color
        	addi $t1, $t1, 2  # skip a pixel and move to next column      
        	blt $t1, $t4, drawRowWithSkip_loop
    	jr $ra
    
# Draw the road using pre-defined colors
# Parameters: $t0 = starting row, $t1 = starting column, $t2 = road color data
drawRoad:
drawRoad_row_loop:
    	drawRoad_col_loop:
        	mul $a1, $t0, 32 # calculate the pixel position
        	add $a1, $a1, $t1
        	sll $a1, $a1, 2 # convert pixel position to byte offset
        	add $a1, $a1, $s0 # add base address to get the actual address
        	lw $t3, 0($t2) # load pixel color
        	sw $t3, 0($a1) # store the pixel color
        	addi $t1, $t1, 1 # move to next column
        	addi $t2, $t2, 4 # move to next color data
        	blt $t1, 32, drawRoad_col_loop

    # reset column and move to next row
    	li $t1, 0
    	addi $t0, $t0, 1
    	blt $t0, 32, drawRoad_row_loop

	jr $ra

# subroutine for the oncoming truck
draw_truck_loop:
	mul $a3, $t0, 32 # calculate the pixel position
	li $t4, 0
	addi $t5, $t1, 33

    	draw_truck__col_loop:
        	add $a1, $zero, $a3
        	add $a1, $a1, $t1
        	sll $a1, $a1, 2 # convert pixel position to byte offset
        	add $a1, $a1, $s0 # add base address to get actual address
        	lw $t3, 0($t2) # load pixel color
        	sw $t3, 0($a1) # store the pixel color
        	addi $t1, $t1, 1 # move to next column
        	addi $t2, $t2, 4 # move to next color data
        	addi $t4, $t4, 1
        	beq $t4, 3, obst_truck_pos
        	jump_draw3:
        		blt $t1, $t5, draw_truck__col_loop
	jr $ra

draw_user_car:
draw_user_row_loop:
	mul $a3, $t0, 32 # calculate the pixel position
	li $t4, 0
	addi $t5, $t1, 35

    	draw_user_col_loop:
        	add $a1, $zero, $a3
        	add $a1, $a1, $t1
        	sll $a1, $a1, 2 # convert pixel position to byte offset
        	add $a1, $a1, $s0 # add base address to get actual address
        	lw $t3, 0($t2) # load pixel color
        	sw $t3, 0($a1) # store the pixel color
        	addi $t1, $t1, 1 # move to next column
        	addi $t2, $t2, 4 # move to next color data
        	addi $t4, $t4, 1
        	beq $t4, 5, user_new_pos
        	jump_draw1:
        		blt $t1, $t5, draw_user_col_loop
	jr $ra

draw_user_obst_cars:
	mul $a3, $t0, 32 # calculate the pixel position
	li $t4, 0
	addi $t5, $t1, 15
    	draw_user_obst_cars_col:
        	add $a1, $zero, $a3
        	add $a1, $a1, $t1
        	sll $a1, $a1, 2 # cnvert pixel position to byte offset
        	add $a1, $a1, $s0 # add base address to get actual address
        	lw $t3, 0($t2) # load pixel color
        	sw $t3, 0($a1) # store the pixel color
        	addi $t1, $t1, 1 # move to next column
        	addi $t2, $t2, 4 # move to next color data
        	addi $t4, $t4, 1
        	beq $t4, 3, obst_car_pos
        	jump_draw2:
        		blt $t1, $t5, draw_user_obst_cars_col
	jr $ra

	


# check for collision  
check_collision_cars:
	# check y-axis
	lw $t0, obst1_y_pos
	addi $t0, $t0, obstacle_car_height
	li $t1, user_y_pos
	sub $t2, $t1, $t0
	bge $t2, $zero, no_coll
	# check x-axis
	lw $t0, obst1_x_pos
	lw $t1, user_x_pos
	blt $t1, $t0, coll_x_checker_car
	sub $t3, $t1, $t0
	ble $t3, 3, yes_coll
	bgt $t3, 3, no_coll
coll_x_checker_car:
	sub $t3, $t0, $t1
	ble $t3, 4, yes_coll
	bgt $t3, 4, no_coll
yes_coll:  # there is a collision
	lw $t0, player_lives
	beqz $t0, game_over
	subi $t0, $t0, 1
	sw $t0, player_lives
	b reset # branch to reset

no_coll: # there is no collision
	jr $ra

reset:  # resets the position of obstacles (vehicles)

	li $t3, 33
	sw $t3, obst_long_checker
	sw $t3, right_car_random_checker
	lw $t0, obst1_y_pos_fix
	sw $t0, obst1_y_pos
	lw $t0, obst2_y_pos_fix
	sw $t0, obst2_y_pos
	sw $t0, obst3_y_pos
	jr $ra

check_collision_cars_2:
# check y-axis
	lw $t0, obst3_y_pos
	addi $t0, $t0, obstacle_car_height
	li $t1, user_y_pos
	sub $t2, $t1, $t0
	bge $t2, $zero, no_coll
# check x-axis
	lw $t0, obst3_x_pos
	lw $t1, user_x_pos
	blt $t1, $t0, coll_x_checker_car_2
	sub $t3, $t1, $t0
	ble $t3, 3, yes_coll
	bgt $t3, 3, no_coll
coll_x_checker_car_2:
	sub $t3, $t0, $t1
	ble $t3, 3, yes_coll
	bgt $t3, 3, no_coll
	b yes_coll


check_collision_trucks:
	# check y-axis
	lw $t0, obst2_y_pos
	addi $t0, $t0, obstacle_truck_height
	li $t1, user_y_pos
	sub $t2, $t1, $t0
	bge $t2, $zero, no_coll
	# check x-axis
	lw $t0, obst2_x_pos
	lw $t1, user_x_pos
	blt $t1, $t0, coll_x_checker_truck
	sub $t3, $t1, $t0
	ble $t3, 2, yes_coll
	bgt $t3, 3, no_coll
coll_x_checker_truck:
	sub $t3, $t0, $t1
	ble $t3, 4, yes_coll
	bgt $t3, 4, no_coll
	b yes_coll

# GAME_OVER_FUNCTION
game_over:
   #Game over
   	li $t0, 0  
   	li $t1, 0 
   	la $t2, game_over_screen
   	jal drawRoad
b Exit

# Subroutines to draw the sprites without pixel shifting
user_new_pos:
	addi $a3, $a3, 27
	li $t4, 0
	b jump_draw1

obst_car_pos:
	addi $a3, $a3, 29
	li $t4, 0
	b jump_draw2

obst_truck_pos:
	addi $a3, $a3, 29
	li $t4, 0
	b jump_draw3


#OBSTACLE FUNCTIONS
obst1_movement:
	b obst1_down

#moves the obst1
obst1_down:
	lw $t0, obst1_y_pos		#takes the obst_pos1
	beq $t0, 33, reset_obst1	#if out of field clear
	addi $t0, $t0, 1		#increase new_pos_obst1
	sw $t0, obst1_y_pos		#save it to new_pos
	jr $ra

#clear the obst2
reset_obst1:
	lw $t0, obst1_y_pos_fix 	#takes position of the obstacle1
	sw $t0, obst1_y_pos		#save it to new position
	jr $ra

#moves the obst2
obst2_movement:
	b obst2_down

#moves the obst2
obst2_down:
	lw $t0, obst2_y_pos	 #takes the obst_pos
	beq $t0, 33, reset_obst2 #if out of field clear
	addi $t0, $t0, 1	 #increase new_pos
	sw $t0, obst2_y_pos	 #save it to new_pos	
	jr $ra

#clear the obst2
reset_obst2:
	lw $t0, obst2_y_pos_fix  #takes position of the obstacle2
	sw $t0, obst2_y_pos	 #save it to new position
	jr $ra

#moves the obst3
obst3_movement:
	b obst3_down

#moves the obst3 
obst3_down:
	lw $t0, obst3_y_pos 	 #takes the obst_pos
	beq $t0, 33, reset_obst3 #if out of field clear
	addi $t0, $t0, 1    	 #increase new_pos
	sw $t0, obst3_y_pos      #save it to new_pos
	jr $ra

#clear the obst3
reset_obst3:
	lw $t0, obst3_y_pos_fix #takes position of the obstacle3
	sw $t0, obst3_y_pos     #save it to new position
	jr $ra

#USER RIGHT LEFT CONTROL AND MOVEMENT
#shift positions left
position_left:
	lw $t0, user_x_pos
	beq $t0, 1, clear_keyboard ##prevents it from going out from the left side when the screen size is finished
	addi $t0, $t0, -1 #reduce t0
	sw $t0, user_x_pos #save the new_pos
	b clear_keyboard

#shift positions left
position_right:
	lw $t0, user_x_pos
	beq $t0, 26, clear_keyboard #prevents it from going out from the right side when the screen size is finished
	addi $t0, $t0, 1
	sw $t0, user_x_pos
	b clear_keyboard

#create random number
random_number_creator_position:
	la $a1, random_number
	li $v0, 42
	li $a0, 0  
	syscall
	b random_right
	
#create random obstacle
random_number_creater_obst:
	la $a1, random_obst
	li $v0, 42
	li $a0, 0  
	syscall
	b random_back1

random_back1:
   	beqz $a0, left_car
   	beq $a0, 1, left_truck

#KEYWORD ACTION
keyboard:
	lw $a2, 0xffff0004  		
	beq $a2, 0x61, position_left	# shift position left when the key A is pressed
	beq $a2, 0x64, position_right   # shift  position right when the key D is pressed

#clear the saved keyboard data
clear_keyboard:
	sw $zero, 0xffff0004
	jr $ra
	
Exit:
    li $v0, 10
    syscall
